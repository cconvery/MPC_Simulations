using Plots
using Interact
using FileIO
using FFMPEG
using LinearAlgebra
using SymPy
using Plots

# Set save directory
save_path = ""

## Plotting options
first_mirror = true # determines which mirror we plot (false sets it to second mirror)

## Animating options

# Set d_sweep or w0_sweep to true, to animate a change in this parameter
d_sweep = true
w0_sweep = false
num_frames = 100
anim_mult_min = .6 # The minimum multiplying constant to the stable condition
anim_mult_max = 1.0 # The maximum multiplying constant to the stable condition

anim_mult = [anim_mult_min + i * (anim_mult_max-anim_mult_min)/num_frames for i in 1:num_frames]

# sweeping animation from stable conditions will happen when constructing tensor, so we don't have generate same heatmap more than once

## Define the matrix dimension
mat_dimension = 300  # Change this value to your desired dimension
mat_coord_normalization = 6000 # Pixels (or values) per meter

## Simulation parameters (manual entered, not necessarily what is run in simulation, which depend on "System Options")

## Cell parameters

# Controllable parameters
num_passes = 14 # number of passes
f = .5 # focal length (meters)

## Input beam parameters

# Controllable parameters
x0 = .015 # initial x distance on mirror (meters)
lambda = 1000 * 10^-9

# Setting stable mode conditions
nu = num_passes/2
d = (2*f) * (1 - cos(pi - (pi/nu)))
d_init = d/2
w0 = ((lambda^2 * (4*f*d - d^2))/(4*pi^2))^(1/4) # (meters) beam waist radius before first lens
x0_prime = -2 * x0 / d
y0 = x0 * sqrt((4*f)/(d) - 1)
y0_prime = 0

if d_sweep == true
    d_values = [anim_mult[i] .* d for i in 1:num_frames]
elseif w0_sweep == true
    w0_values = [anim_mult[i] .* w0 for i in 1:num_frames]
end

tensor = zeros(mat_dimension, mat_dimension, num_frames)
## Redefining parameters based on "System Options"
for frame in 1:num_frames
    if d_sweep == true
        # Stable mode conditions (d < 4f)
        global d = d_values[frame]
    elseif w0_sweep == true
        global w0 = w0_values[frame]
    end

    ## Solve for beam waist w(z) at each lens

    # Determine number of impacts on a given mirror
    num_impacts = floor(Int, num_passes/2)
    if first_mirror == false
        num_impacts = floor(Int, num_passes/2)
    elseif first_mirror == true
        num_impacts = ceil(Int, num_passes/2)
    end

    # Matrices for constant non-swept parameters
    lens_mat = [1.0 0.0 ; -1.0/f 1]
    d_mat = [1.0 d ; 0.0 1.0]

    # Defining constant "q"
    q = pi * w0^2 / lambda

    # Defining matrices for lenses and "air gaps"
    d_init_mat = [1.0 d_init ; 0.0 1.0]

    # Defining ABCD matrix iteratively, num_passes = num_of_lenses
    ABCD_tensor = zeros(Float64, num_passes, 2, 2)

    for i in 1:num_passes
        if i == 1
            ABCD_tensor[i, :, :] = lens_mat * d_init_mat
        else
            ABCD_tensor[i, :, :] = lens_mat * d_mat * ABCD_tensor[i-1, :, :]
        end
    end

    # Solving for position of each beam waist and for beam waist radius
    v = symbols("v")
    v_matrix = [1.0 v ; 0.0 1.0]

    v_vector = zeros(num_passes)
    w0_vector = zeros(num_passes)

    for i in 1:num_passes
        ABCD_mat_sym = v_matrix * ABCD_tensor[i, :, :]

        equation1 = ABCD_mat_sym[1,2] * ABCD_mat_sym[2,2] + q^2 * ABCD_mat_sym[1,1] * ABCD_mat_sym[2,1]
        solution = solve(equation1, v)
        v_vector[i] = N(solution[1])

        ABCD_mat_sol = [subs(entry, v, v_vector[i]) for entry in ABCD_mat_sym]

        A = ABCD_mat_sol[1,1]
        B = ABCD_mat_sol[1,2]
        C = ABCD_mat_sol[2,1]
        D = ABCD_mat_sol[2,2]

        w0_vector[i] = sqrt(w0^2 * (A^2 + B^2/(q^2)) / (A * D - B * C))

    end

    # Finding beam waist at each lens, w(z) = w0 sqrt(1+(z/z_r)^2), z_r = pi * w0^2 * n / lambda
    width_at_lens = zeros(num_impacts)
    for i in 0:num_impacts-1
        if i == 0
            z_r = pi * w0^2 / lambda
            width_at_lens[i+1] = w0 * sqrt(1 + (d_init/z_r)^2)
        else
            z_r = pi * w0_vector[i]^2 / lambda
            d_diff = d - v_vector[i]
            width_at_lens[i+1] = w0_vector[i] * sqrt(1 + (d_diff/z_r)^2)
        end
    end

    # Solve for x_n, and y_n
    x_n = zeros(num_passes)
    y_n = zeros(num_passes)
    theta = acos(1 - (d/(2*f)))

    for n in 1:num_passes
        x_n[n] = x0 .* cos.(n .* theta) + sqrt((d)/(4*f - d)) .* (x0 + 2*f*x0_prime) .* sin.(n .* theta)
        y_n[n] = y0 .* cos.(n .* theta) + sqrt((d)/(4*f - d)) .* (y0 + 2*f*y0_prime) .* sin.(n .* theta)
    end

    # Loop that creates gaussian values for matrix and adds them together
    i_shift = mat_dimension/2
    j_shift = mat_dimension/2

    matrix = zeros(mat_dimension, mat_dimension)
    for n in 1:num_impacts
        for i in 1:mat_dimension
            x = (i - i_shift)/mat_coord_normalization
            for j in 1:mat_dimension
                y = (j - j_shift)/mat_coord_normalization
                if first_mirror == false
                    gaussian_value = exp(-1*((x+x_n[2*n])^2 + (y+y_n[2*n])^2)/(width_at_lens[n]^2))
                    matrix[i,j] = matrix[i,j] + gaussian_value
                elseif first_mirror == true
                    gaussian_value = exp(-1*((x+x_n[2*n-1])^2 + (y+y_n[2*n-1])^2)/(width_at_lens[n]^2))
                    matrix[i,j] = matrix[i,j] + gaussian_value
                end
            end
        end
    end
    tensor[: , :, frame] = transpose(matrix[: , :])
    println("Finished frame ", frame)
end

# Log scale for tensor
tensor = log10.(tensor .+ 1)  # Add 1 to avoid log(0)

# Define the custom color gradient
tensor_min = minimum(tensor)
tensor_max = maximum(tensor)
clims = (tensor_min, tensor_max)

colors = cgrad([:white, :green], [0, 2.5])

# Define x_range and y_range of 
x_range = range(-1/2*mat_dimension/mat_coord_normalization, stop=1/2*mat_dimension/mat_coord_normalization, length=mat_dimension)
y_range = range(-1/2*mat_dimension/mat_coord_normalization, stop=1/2*mat_dimension/mat_coord_normalization, length=mat_dimension)

# Function to plot a heatmap with a dynamic title
function plot_heatmap_from_tensor(tensor, idx, clims)
    title_str = "Stable Distance " * string(round(100 .* anim_mult[idx], digits = 6)) * "%"
    heatmap(x_range, y_range, tensor[:, :, idx], c=:jet1, title=title_str, clims=clims,
    xlabel = "X-axis (meters)", ylabel = "Y-axis (meters)")
end

# Function to create and display the interactive animation
function animate_heatmap(tensor, clims)
    @manipulate for idx in 1:size(tensor, 3)
        plot_heatmap_from_tensor(tensor, idx, clims)
    end
end

# Function to save the animation as an MP4 video
function save_heatmap_animation_as_mp4(tensor, save_path::String, clims)
    anim = @animate for idx in 1:size(tensor, 3)
        plot_heatmap_from_tensor(tensor, idx, clims)
    end
    mp4(anim, save_path, fps=10)  # Adjust fps (frames per second) as needed
end

# Saving animation
save_heatmap_animation_as_mp4(tensor, save_path, clims)
println("Animation saved to $save_path")